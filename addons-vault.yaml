     
  vault:
    enabled: true

    values:
      # disable autoInit. It should not be used for operations.
      autoInit:
        enabled: false

      global:
        # this is a double negative. Put "false" to enable TLS
        tlsDisable: false
      
      injector:
        extraEnvironmentVars:
          AGENT_INJECT_VAULT_ADDR: "https://vault.stg.bahsoftwarefactory.com"
      
      server:
        # The BigBang helm chart has configuration that can create the vault-tls secret and volumemont for you
        # Volume mount the secret so that Vault can support Istio ingress passthrough
        volumes:
        - name: tls
          secret:
            secretName: vault-tls
        volumeMounts:
        - name: tls
          mountPath: "/vault/tls"
          readOnly: true
        dataStorage:
          enabled: true
          size: 50Gi
          mountPath: "/vault/data"
          accessMode: ReadWriteOnce
      
        # Increase default resources
        resources:
          requests:
            memory: 8Gi
            cpu: 2000m
          limits:
            memory: 8Gi
            cpu: 2000m
      
        # disable the Vault provided ingress so that Istio ingress can be used.
        ingress:
          enabled: false
      
        # Extra environment variable to support high availability
        extraEnvironmentVars:
          VAULT_API_ADDR: https://vault.stg.bahsoftwarefactory.com  #istio GW domain
          VAULT_ADDR:  https://127.0.0.1:8200
          VAULT_SKIP_VERIFY: "true"
          VAULT_LOG_FORMAT: "json"
          VAULT_LICENSE: "your-license-key-goes-here"
      
        ha:
          # enable high availability.
          enabled: true
          replicas: 3
      
          # raft is the license free most simple solution for distributed filesystem
          raft:
            enabled: true
            setNodeId: true
      
            # This config should be encrypted to prevent the kms_key_id from being revealed
            config: |
              ui = true
      
              listener "tcp" {
                tls_disable = 0
                address = "[::]:8200"
                cluster_address = "[::]:8201"
                tls_cert_file = "/vault/tls/tls.crt"
                tls_key_file  = "/vault/tls/tls.key"
              }
      
              storage "raft" {
                path = "/vault/data"
      
                retry_join {
                  leader_api_addr = "https://vault-vault-0.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.stg.bahsoftwarefactory.com"
                }
        
                retry_join {
                  leader_api_addr = "https://vault-vault-1.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.stg.bahsoftwarefactory.com"
                }
        
                retry_join {
                  leader_api_addr = "https://vault-vault-2.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.stg.bahsoftwarefactory.com"
                }
              }
      
              seal "awskms" {
                region     = "us-east-1"
                kms_key_id = "bde2b254-f04b-4f48-b5b4-4376120c5181"
                endpoint   = "https://kms.us-east-1.amazonaws.com"
              }
      
              telemetry {
                prometheus_retention_time = "24h"
                disable_hostname = true
                unauthenticated_metrics_access = true
              }
      
              service_registration "kubernetes" {}
      
