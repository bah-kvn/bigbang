
domain: stg.bahsoftwarefactory.com
istio:
  enabled: true
  ingressGateways:
    public-ingressgateway:
      type: "LoadBalancer"
      kubernetesResourceSpec:
        serviceAnnotations:
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "kubernetes.io/cluster/c-m-n6rc24wl=owned,env=staging,ingress-type=public"
          service.beta.kubernetes.io/aws-load-balancer-type: nlb
    passthrough-ingressgateway:
      type: "LoadBalancer"
      kubernetesResourceSpec:
        serviceAnnotations:
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "kubernetes.io/cluster/c-m-n6rc24wl=owned,env=staging,ingress-type=passthrough"
          service.beta.kubernetes.io/aws-load-balancer-type: nlb
          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "ssl"
#          service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:729651203190:certificate/625ea41a-a46e-478a-9618-4a2090684d7a"
#          service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
#          service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: 5
  gateways:
    passthrough:
      ingressGateway: "passthrough-ingressgateway"
      hosts:
        - "*.{{ .Values.domain }}"
      tls:
        mode: "PASSTHROUGH"
istiooperator:
  enabled: true
sso: 
  oidc:
    host: keycloak.stg.bahsoftwarefactory.com
    realm: bsf
  certificate_authority: ''
kiali:
  enabled: true
jaeger:
  enabled: false
eckoperator:
  enabled: false
flux:
  interval: 1m
  rollback:
    cleanupOnFail: false
logging:
  enabled: false
  values:
    elasticsearch:
      master:
        count: 1
        persistence:
          size: 256Mi
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
      data:
        count: 1
        persistence:
          size: 256Mi
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
    kibana:
      count: 1
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
monitoring:
  enabled: true
  sso:
    enabled: true
    prometheus:
      client_id: "prometheus"
    alertmanager: 
      client_id: "alertmanager"
    grafana:  
      client_id: "grafana"
      tls_skip_verify_insecure: true
      scopes: "Grafana"
  values:
    prometheus:
      prometheusSpec:
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
fluentbit:
  enabled: false
  values:
    securityContext:
      privileged: false
clusterAuditor:
  enabled: false
gatekeeper:
  enabled: false
  values:
    violations:
      allowedDockerRegistries:
        parameters:
          repos:
            - registry1.dso.mil
            - k8s.gcr.io
            - registry.uip.sh
    replicas: 1
    controllerManager:
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
    audit:
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
kyverno:
  enabled: false
  values:
    replicaCount: 1
twistlock:
  enabled: false
  values:
    console:
      persistence:
        size: 256Mi
addons:

  keycloak:
    enabled: true
    ingress:
      gateway: "passthrough"
    istio:
      injection: disabled
    database:
      host: keycloak-stg.c4ie4j7le0jh.us-east-1.rds.amazonaws.com
      type: postgres
      port: 5432
      database: keycloak
      username: postgres
# Additional keycloak config in secrets.enc.yaml
#     password: password-data      

  gitlabRunner:
    enabled: false

  gitlab:
    enabled: true
    # flux:
    #   timeout: 45m
    #   upgrade:
    #     remediation:
    #       retries: 10
    hostnames:
      gitlab: gitlab
      registry: gitlab-registry
    # objectStorage:
    #   type: "s3"
    #   endpoint: "s3.us-east-1.amazonaws.com"
    #   region: "us-east-1"
    #   bucketPrefix: "bsf-stg"
    #   iamProfile: "BSF_RKE2_ControlPlane_Role"
    values:
      global:
        minio:
          enabled: false
        registry:
          bucket: bsf-stg-gitlab-registry-storage
        appConfig:
          object_store:
            enabled: true
            connection: 
              secret: gitlab-rails-storage
              key: connection
          artifacts: 
            bucket: bsf-stg-gitlab-artifacts-storage
          backups:
            bucket: bsf-stg-gitlab-backups-storage
            tmpBucket: bsf-stg-gitlab-tmp-storage
          dependencyProxy:
            bucket: bsf-stg-gitlab-dependencyproxy-storage
          externalDiffs:
            bucket: bsf-stg-gitlab-externaldiffs-storage
          lfs:
            bucket: bsf-stg-gitlab-lfs-storage
          packages:
            bucket: bsf-stg-gitlab-packages-storage
          terraformState:
            bucket: bsf-stg-gitlab-terraformstate-storage
          uploads:
            bucket: bsf-stg-gitlab-uploads-storage
          gitlab: 
            toolbox:
              backups:
                objectStorage:
                  config: 
                    secret: gitlab-storage-config
                    key: config 
          omniauth:
            enabled: true
            allowSingleSignOn: ['saml']
            autoLinkUser: true
            syncProfileFromProvider: ['saml']
            # syncProfileAttributes: ['name', 'email']
            blockAutoCreatedUsers: false
            providers:
              - secret: gitlab-keycloak
          registry: 
            storage:
              secret: gitlab-registry-storage
              key: config
     
  vault:
    enabled: false

    values:
      # disable autoInit. It should not be used for operations.
      autoInit:
        enabled: false

      global:
        # this is a double negative. Put "false" to enable TLS
        tlsDisable: false
      
      injector:
        extraEnvironmentVars:
          AGENT_INJECT_VAULT_ADDR: "https://vault.stg.bahsoftwarefactory.com"
      
      server:
        # The BigBang helm chart has configuration that can create the vault-tls secret and volumemont for you
        # Volume mount the secret so that Vault can support Istio ingress passthrough
        volumes:
        - name: tls
          secret:
            secretName: vault-tls
        volumeMounts:
        - name: tls
          mountPath: "/vault/tls"
          readOnly: true
        dataStorage:
          enabled: true
          size: 50Gi
          mountPath: "/vault/data"
          accessMode: ReadWriteOnce
      
        # Increase default resources
        resources:
          requests:
            memory: 8Gi
            cpu: 2000m
          limits:
            memory: 8Gi
            cpu: 2000m
      
        # disable the Vault provided ingress so that Istio ingress can be used.
        ingress:
          enabled: false
      
        # Extra environment variable to support high availability
        extraEnvironmentVars:
          VAULT_API_ADDR: https://vault.stg.bahsoftwarefactory.com  #istio GW domain
          VAULT_ADDR:  https://127.0.0.1:8200
          VAULT_SKIP_VERIFY: "true"
          VAULT_LOG_FORMAT: "json"
          VAULT_LICENSE: "your-license-key-goes-here"
      
        ha:
          # enable high availability.
          enabled: true
          replicas: 3
      
          # raft is the license free most simple solution for distributed filesystem
          raft:
            enabled: true
            setNodeId: true
      
            # This config should be encrypted to prevent the kms_key_id from being revealed
            config: |
              ui = true
      
              listener "tcp" {
                tls_disable = 0
                address = "[::]:8200"
                cluster_address = "[::]:8201"
                tls_cert_file = "/vault/tls/tls.crt"
                tls_key_file  = "/vault/tls/tls.key"
                tls_disable_client_certs = "true"
              }
      
              storage "raft" {
                path = "/vault/data"
      
                retry_join {
                  leader_api_addr = "https://vault-vault-0.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.stg.bahsoftwarefactory.com"
                }
        
                retry_join {
                  leader_api_addr = "https://vault-vault-1.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.stg.bahsoftwarefactory.com"
                }
        
                retry_join {
                  leader_api_addr = "https://vault-vault-2.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.stg.bahsoftwarefactory.com"
                }
              }
      
              seal "awskms" {
                region     = "us-east-1"
                kms_key_id = "bde2b254-f04b-4f48-b5b4-4376120c5181"
                endpoint   = "https://kms.us-east-1.amazonaws.com"
              }
      
              telemetry {
                prometheus_retention_time = "24h"
                disable_hostname = true
                unauthenticated_metrics_access = true
              }
      
              service_registration "kubernetes" {}
      
