domain: "ssc.bahsoftwarefactory.com"

istio:
  ingressGateways:
    public-ingressgateway:
      type: "LoadBalancer"
      kubernetesResourceSpec:
        serviceAnnotations:
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "kubernetes.io/cluster/ssc=owned,ingress-type=public"
          service.beta.kubernetes.io/aws-load-balancer-type: nlb
          external-dns.alpha.kubernetes.io/hostname: "*.ssc.bahsoftwarefactory.com"
          service.beta.kubernetes.io/load-balancer-source-ranges: "156.80.4.2/32, 10.40.7.0/24, 10.40.8.0/24, 10.40.9.0/24"
          service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-04987f9522e27a836, subnet-069fd7685cca4018a, subnet-08942469f925d9b66"
    passthrough-ingressgateway:
      type: "LoadBalancer"
      kubernetesResourceSpec:
        serviceAnnotations:
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "kubernetes.io/cluster/ssc=owned,ingress-type=passthrough"
          service.beta.kubernetes.io/aws-load-balancer-type: nlb
          external-dns.alpha.kubernetes.io/hostname: "vault.ssc.bahsoftwarefactory.com, keycloak.ssc.bahsoftwarefactory.com"
          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "ssl"
          service.beta.kubernetes.io/load-balancer-source-ranges: "156.80.4.2/32, 10.40.7.0/24, 10.40.8.0/24, 10.40.9.0/24"
          service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-04987f9522e27a836, subnet-069fd7685cca4018a, subnet-08942469f925d9b66"
  gateways:
    public:
      hosts:
        - "*.{{ .Values.domain }}"
      tls:
        credentialName: "public-cert"
    passthrough:
      ingressGateway: "passthrough-ingressgateway"
      hosts:
        - "*.{{ .Values.domain }}"
      tls:
        mode: "PASSTHROUGH"
        credentialName: "passthrough-cert"

monitoring:
  enabled: true
  sso:
    enabled: false
    prometheus:
      client_id: "prometheus"
    alertmanager:
      client_id: "alertmanager"
    grafana:
      client_id: "grafana"
      tls_skip_verify_insecure: true
      scopes: "Grafana"
  values:
    prometheus:
      prometheusSpec:
        resources:
          requests:
            cpu: 200m
            memory: 1Gi

loki:
  enabled: true

promtail:
  enabled: true
  values:
    config:
      snippets:
        extraScrapeConfigs: |
          - job_name: journal
            journal:
              path: /var/log/journal
              max_age: 12h
              labels:
                job: systemd-journal
            relabel_configs:
              - source_labels:
                  - __journal__hostname
                target_label: hostname
              - source_labels:
                  - __journal__systemd_unit
                target_label: unit
              - source_labels:
                  - __journal_priority_keyword
                target_label: level

          - job_name: audit
            static_configs:
              - targets:
                  - localhost
                labels:
                  job: audit
                  __path__: /var/lib/rancher/rke2/server/logs/audit.log
                  hostname: ${HOSTNAME}
    extraVolumes:
      - name: journal
        hostPath:
          path: /var/log/journal
      - name: machine-id
        hostPath:
          path: /etc/machine-id
      - name: audit
        hostPath:
          path: /var/lib/rancher/rke2/server/logs/audit.log
    extraVolumeMounts:
      - name: journal
        mountPath: /var/log/journal
        readOnly: true
      - name: machine-id
        mountPath: /etc/machine-id
        readOnly: true
      - name: audit
        mountPath: /var/lib/rancher/rke2/server/logs/audit.log
        readOnly: true
    extraArgs:
      - '-config.expand-env'

addons:
  vault:
    ingress:
      gateway: "passthrough"
    enabled: true
    values:
      # disable autoInit. It should not be used for operations.
      autoInit:
        enabled: true
      global:
        # this is a double negative. Put "false" to enable TLS
        tlsDisable: false
      injector:
        extraEnvironmentVars:
          AGENT_INJECT_VAULT_ADDR: "https://vault.ssc.bahsoftwarefactory.com"
      server:
        # The BigBang helm chart has configuration that can create the vault-tls secret and volumemont for you
        # Volume mount the secret so that Vault can support Istio ingress passthrough
        volumes:
          - name: tls
            secret:
              secretName: vault-tls
        volumeMounts:
          - name: tls
            mountPath: "/vault/tls"
            readOnly: true
        dataStorage:
          enabled: true
          size: 50Gi
          mountPath: "/vault/data"
          accessMode: ReadWriteOnce
        resources:
          requests:
            memory: 8Gi
            cpu: 2000m
          limits:
            memory: 8Gi
            cpu: 2000m
        ingress:
          enabled: false
        extraEnvironmentVars:
          VAULT_API_ADDR: https://vault.ssc.bahsoftwarefactory.com #istio GW domain
          VAULT_ADDR: https://127.0.0.1:8200
          VAULT_SKIP_VERIFY: "true"
          VAULT_LOG_FORMAT: "json"
          VAULT_LICENSE: "your-license-key-goes-here"
        ha:
          enabled: true
          replicas: 3
          raft:
            enabled: true
            setNodeId: true
            # This config should be encrypted to prevent the kms_key_id from being revealed
            config: |
              ui = true

              listener "tcp" {
                tls_disable = 0
                address = "[::]:8200"
                cluster_address = "[::]:8201"
                tls_cert_file = "/vault/tls/tls.crt"
                tls_key_file  = "/vault/tls/tls.key"
                tls_disable_client_certs = "true"
              }

              storage "raft" {
                path = "/vault/data"

                retry_join {
                  leader_api_addr = "https://vault-vault-0.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.ssc.bahsoftwarefactory.com"
                }

                retry_join {
                  leader_api_addr = "https://vault-vault-1.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.ssc.bahsoftwarefactory.com"
                }

                retry_join {
                  leader_api_addr = "https://vault-vault-2.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/tls/tls.crt"
                  leader_client_key_file = "/vault/tls/tls.key"
                  leader_tls_servername = "vault.ssc.bahsoftwarefactory.com"
                }
              }

              seal "awskms" {
                region     = "us-east-1"
                kms_key_id = "bde2b254-f04b-4f48-b5b4-4376120c5181"
                endpoint   = "https://kms.us-east-1.amazonaws.com"
              }

              telemetry {
                prometheus_retention_time = "24h"
                disable_hostname = true
                unauthenticated_metrics_access = true
              }

              service_registration "kubernetes" {}
