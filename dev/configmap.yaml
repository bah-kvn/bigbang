domain: dev.bahsoftwarefactory.com
istio:
  enabled: true
  ingressGateways:
    public-ingressgateway:
      type: "LoadBalancer"
      kubernetesResourceSpec:
        serviceAnnotations:
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "kubernetes.io/cluster/c-m-8slnllj8=owned,env=development,ingress-type=public"
          service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-08942469f925d9b66,subnet-04987f9522e27a836,subnet-069fd7685cca4018a"
          service.beta.kubernetes.io/aws-load-balancer-type: nlb
    passthrough-ingressgateway:
      type: "LoadBalancer"
      kubernetesResourceSpec:
        serviceAnnotations:
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "kubernetes.io/cluster/c-m-8slnllj8=owned,env=development,ingress-type=passthrough"
          service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:729651203190:certificate/513b576e-e69f-4198-8478-cedafe46240f"
          service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
          service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-08942469f925d9b66,subnet-04987f9522e27a836,subnet-069fd7685cca4018a"
          service.beta.kubernetes.io/aws-load-balancer-type: nlb
  gateways:
    public:
      ingressGateway: "public-ingressgateway"
      hosts:
        - "*.{{ .Values.domain }}"
    passthrough:
      ingressGateway: "passthrough-ingressgateway"
      hosts:
        - "*.{{ .Values.domain }}"
      tls:
        mode: "PASSTHROUGH"
istiooperator:
  enabled: true
kiali:
  enabled: true
jaeger:
  enabled: true
eckoperator:
  enabled: false
flux:
  interval: 1m
  rollback:
    cleanupOnFail: false
logging:
  enabled: false
  values:
    elasticsearch:
      master:
        count: 1
        persistence:
          size: 256Mi
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
      data:
        count: 1
        persistence:
          size: 256Mi
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
    kibana:
      count: 1
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
monitoring:
  enabled: false
  values:
    prometheus:
      prometheusSpec:
        resources:
          requests:
            cpu: 200m
            memory: 1Gi
fluentbit:
  enabled: false
  values:
    securityContext:
      privileged: false
clusterAuditor:
  enabled: false
gatekeeper:
  enabled: false
  values:
    violations:
      allowedDockerRegistries:
        parameters:
          repos:
            - registry1.dso.mil
            - k8s.gcr.io
            - registry.uip.sh
    replicas: 1
    controllerManager:
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
    audit:
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
kyverno:
  enabled: false
  values:
    replicaCount: 1
twistlock:
  enabled: false
  values:
    console:
      persistence:
        size: 256Mi
addons:
  vault:
    enabled: true
    values:
      autoInit:
        enabled: true
      global:
        tlsDisable: false
      injector:
        extraEnvironmentVars:
          AGENT_INJECT_VAULT_ADDR: "https://vault.dev.bahsoftwarefactory.com"
      server:
        resources:
          requests:
            memory: 8Gi
            cpu: 2000m
          limits:
            memory: 8Gi
            cpu: 2000m
        extraVolumes:
          - type: secret
            name: vault-server-tls
        extraEnvironmentVars:
          VAULT_API_ADDR: https://vault.dev.bahsoftwarefactory.com
          VAULT_ADDR: https://127.0.0.1:8200
          VAULT_SKIP_VERIFY: "true"
          VAULT_LOG_FORMAT: "json"
        ha:
          enabled: true
          replicas: 3
          raft:
            enabled: true
            setNodeId: true
            config: |
              ui = true
              listener "tcp" {
                tls_disable = 0
                address = "[::]:8200"
                cluster_address = "[::]:8201"
                tls_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
                tls_key_file  = "/vault/userconfig/vault-server-tls/tls.key"
              }
              storage "raft" {
                path = "/vault/data"
                retry_join {
                  leader_api_addr = "https://vault-vault-0.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
                  leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
                  leader_tls_servername = "vault.dev.bahsoftwarefactory.com"
                }
                retry_join {
                  leader_api_addr = "https://vault-vault-1.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
                  leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
                  leader_tls_servername = "vault.dev.bahsoftwarefactory.com"
                }
                retry_join {
                  leader_api_addr = "https://vault-vault-2.vault-vault-internal:8200"
                  leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
                  leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
                  leader_tls_servername = "vault.dev.bahsoftwarefactory.com"
                }
              }
              seal "awskms" {
                region     = "us-east-1"
                kms_key_id = "bde2b254-f04b-4f48-b5b4-4376120c5181"
                endpoint   = "https://kms.us-east-1.amazonaws.com"
              }
              telemetry {
                prometheus_retention_time = "24h"
                disable_hostname = true
                unauthenticated_metrics_access = true
              }
              service_registration "kubernetes" {}
